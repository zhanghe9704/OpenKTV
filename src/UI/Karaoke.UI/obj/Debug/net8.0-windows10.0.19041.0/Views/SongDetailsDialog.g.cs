#pragma checksum "D:\Work\Code\karaoke\src\UI\Karaoke.UI\Views\SongDetailsDialog.xaml" "{8829d00f-11b8-4213-878b-770e8597ac16}" "24A0980F79E4DA51DEFE448AC39E7FFE28EDE3951BCD898B368325FE29F0079D"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Karaoke.UI.Views
{
    partial class SongDetailsDialog : 
        global::Microsoft.UI.Xaml.Controls.ContentDialog, 
        global::Microsoft.UI.Xaml.Markup.IComponentConnector
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2408")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private static class XamlBindingSetters
        {
            public static void Set_Microsoft_UI_Xaml_Controls_ContentDialog_PrimaryButtonText(global::Microsoft.UI.Xaml.Controls.ContentDialog obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.PrimaryButtonText = value ?? global::System.String.Empty;
            }
            public static void Set_Microsoft_UI_Xaml_Controls_ContentDialog_SecondaryButtonText(global::Microsoft.UI.Xaml.Controls.ContentDialog obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.SecondaryButtonText = value ?? global::System.String.Empty;
            }
            public static void Set_Microsoft_UI_Xaml_Controls_InfoBar_IsOpen(global::Microsoft.UI.Xaml.Controls.InfoBar obj, global::System.Boolean value)
            {
                obj.IsOpen = value;
            }
            public static void Set_Microsoft_UI_Xaml_Controls_InfoBar_Severity(global::Microsoft.UI.Xaml.Controls.InfoBar obj, global::Microsoft.UI.Xaml.Controls.InfoBarSeverity value)
            {
                obj.Severity = value;
            }
            public static void Set_Microsoft_UI_Xaml_Controls_InfoBar_Title(global::Microsoft.UI.Xaml.Controls.InfoBar obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.Title = value ?? global::System.String.Empty;
            }
            public static void Set_Microsoft_UI_Xaml_Controls_InfoBar_Message(global::Microsoft.UI.Xaml.Controls.InfoBar obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.Message = value ?? global::System.String.Empty;
            }
            public static void Set_Microsoft_UI_Xaml_Controls_TextBlock_Text(global::Microsoft.UI.Xaml.Controls.TextBlock obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.Text = value ?? global::System.String.Empty;
            }
            public static void Set_Microsoft_UI_Xaml_Controls_TextBlock_Foreground(global::Microsoft.UI.Xaml.Controls.TextBlock obj, global::Microsoft.UI.Xaml.Media.Brush value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::Microsoft.UI.Xaml.Media.Brush) global::Microsoft.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::Microsoft.UI.Xaml.Media.Brush), targetNullValue);
                }
                obj.Foreground = value;
            }
            public static void Set_Microsoft_UI_Xaml_UIElement_Visibility(global::Microsoft.UI.Xaml.UIElement obj, global::Microsoft.UI.Xaml.Visibility value)
            {
                obj.Visibility = value;
            }
            public static void Set_Microsoft_UI_Xaml_Controls_NumberBox_Value(global::Microsoft.UI.Xaml.Controls.NumberBox obj, global::System.Double value)
            {
                obj.Value = value;
            }
            public static void Set_Microsoft_UI_Xaml_Controls_TextBox_Text(global::Microsoft.UI.Xaml.Controls.TextBox obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.Text = value ?? global::System.String.Empty;
            }
        };

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2408")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private class SongDetailsDialog_obj1_Bindings :
            global::Microsoft.UI.Xaml.Markup.IDataTemplateComponent,
            global::Microsoft.UI.Xaml.Markup.IXamlBindScopeDiagnostics,
            global::Microsoft.UI.Xaml.Markup.IComponentConnector,
            ISongDetailsDialog_Bindings
        {
            private global::Karaoke.UI.Views.SongDetailsDialog dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);

            // Fields for each control that has bindings.
            private global::System.WeakReference obj1;
            private global::Microsoft.UI.Xaml.Controls.InfoBar obj2;
            private global::Microsoft.UI.Xaml.Controls.TextBlock obj3;
            private global::Microsoft.UI.Xaml.Controls.TextBlock obj4;
            private global::Microsoft.UI.Xaml.Controls.TextBlock obj5;
            private global::Microsoft.UI.Xaml.Controls.TextBlock obj6;
            private global::Microsoft.UI.Xaml.Controls.TextBlock obj7;
            private global::Microsoft.UI.Xaml.Controls.NumberBox obj8;
            private global::Microsoft.UI.Xaml.Controls.StackPanel obj9;
            private global::Microsoft.UI.Xaml.Controls.StackPanel obj10;
            private global::Microsoft.UI.Xaml.Controls.TextBlock obj11;
            private global::Microsoft.UI.Xaml.Controls.NumberBox obj12;
            private global::Microsoft.UI.Xaml.Controls.TextBlock obj13;
            private global::Microsoft.UI.Xaml.Controls.TextBlock obj14;
            private global::Microsoft.UI.Xaml.Controls.TextBox obj15;
            private global::Microsoft.UI.Xaml.Controls.TextBlock obj16;
            private global::Microsoft.UI.Xaml.Controls.TextBox obj17;
            private global::Microsoft.UI.Xaml.Controls.TextBlock obj18;
            private global::Microsoft.UI.Xaml.Controls.TextBox obj19;
            private global::Microsoft.UI.Xaml.Controls.TextBlock obj20;
            private global::Microsoft.UI.Xaml.Controls.TextBox obj21;
            private global::Microsoft.UI.Xaml.Controls.TextBlock obj22;
            private global::Microsoft.UI.Xaml.Controls.TextBox obj23;
            private global::Microsoft.UI.Xaml.Controls.TextBlock obj24;

            // Static fields for each binding's enabled/disabled state
            private static bool isobj1PrimaryButtonTextDisabled = false;
            private static bool isobj1SecondaryButtonTextDisabled = false;
            private static bool isobj2IsOpenDisabled = false;
            private static bool isobj2SeverityDisabled = false;
            private static bool isobj2TitleDisabled = false;
            private static bool isobj2MessageDisabled = false;
            private static bool isobj3TextDisabled = false;
            private static bool isobj4TextDisabled = false;
            private static bool isobj4ForegroundDisabled = false;
            private static bool isobj5TextDisabled = false;
            private static bool isobj6TextDisabled = false;
            private static bool isobj7TextDisabled = false;
            private static bool isobj7VisibilityDisabled = false;
            private static bool isobj8ValueDisabled = false;
            private static bool isobj8VisibilityDisabled = false;
            private static bool isobj9VisibilityDisabled = false;
            private static bool isobj10VisibilityDisabled = false;
            private static bool isobj11TextDisabled = false;
            private static bool isobj12ValueDisabled = false;
            private static bool isobj13TextDisabled = false;
            private static bool isobj14TextDisabled = false;
            private static bool isobj14VisibilityDisabled = false;
            private static bool isobj15TextDisabled = false;
            private static bool isobj15VisibilityDisabled = false;
            private static bool isobj16TextDisabled = false;
            private static bool isobj16VisibilityDisabled = false;
            private static bool isobj17TextDisabled = false;
            private static bool isobj17VisibilityDisabled = false;
            private static bool isobj18TextDisabled = false;
            private static bool isobj18VisibilityDisabled = false;
            private static bool isobj19TextDisabled = false;
            private static bool isobj19VisibilityDisabled = false;
            private static bool isobj20TextDisabled = false;
            private static bool isobj20VisibilityDisabled = false;
            private static bool isobj21TextDisabled = false;
            private static bool isobj21VisibilityDisabled = false;
            private static bool isobj22TextDisabled = false;
            private static bool isobj22VisibilityDisabled = false;
            private static bool isobj23TextDisabled = false;
            private static bool isobj23VisibilityDisabled = false;
            private static bool isobj24TextDisabled = false;

            private SongDetailsDialog_obj1_BindingsTracking bindingsTracking;

            public SongDetailsDialog_obj1_Bindings()
            {
                this.bindingsTracking = new SongDetailsDialog_obj1_BindingsTracking(this);
            }

            public void Disable(int lineNumber, int columnNumber)
            {
                if (lineNumber == 9 && columnNumber == 5)
                {
                    isobj1PrimaryButtonTextDisabled = true;
                }
                else if (lineNumber == 11 && columnNumber == 5)
                {
                    isobj1SecondaryButtonTextDisabled = true;
                }
                else if (lineNumber == 21 && columnNumber == 22)
                {
                    isobj2IsOpenDisabled = true;
                }
                else if (lineNumber == 22 && columnNumber == 22)
                {
                    isobj2SeverityDisabled = true;
                }
                else if (lineNumber == 23 && columnNumber == 22)
                {
                    isobj2TitleDisabled = true;
                }
                else if (lineNumber == 24 && columnNumber == 22)
                {
                    isobj2MessageDisabled = true;
                }
                else if (lineNumber == 176 && columnNumber == 61)
                {
                    isobj3TextDisabled = true;
                }
                else if (lineNumber == 152 && columnNumber == 61)
                {
                    isobj4TextDisabled = true;
                }
                else if (lineNumber == 153 && columnNumber == 32)
                {
                    isobj4ForegroundDisabled = true;
                }
                else if (lineNumber == 147 && columnNumber == 36)
                {
                    isobj5TextDisabled = true;
                }
                else if (lineNumber == 141 && columnNumber == 36)
                {
                    isobj6TextDisabled = true;
                }
                else if (lineNumber == 98 && columnNumber == 61)
                {
                    isobj7TextDisabled = true;
                }
                else if (lineNumber == 99 && columnNumber == 32)
                {
                    isobj7VisibilityDisabled = true;
                }
                else if (lineNumber == 100 && columnNumber == 88)
                {
                    isobj8ValueDisabled = true;
                }
                else if (lineNumber == 102 && columnNumber == 32)
                {
                    isobj8VisibilityDisabled = true;
                }
                else if (lineNumber == 106 && columnNumber == 33)
                {
                    isobj9VisibilityDisabled = true;
                }
                else if (lineNumber == 112 && columnNumber == 33)
                {
                    isobj10VisibilityDisabled = true;
                }
                else if (lineNumber == 120 && columnNumber == 61)
                {
                    isobj11TextDisabled = true;
                }
                else if (lineNumber == 113 && columnNumber == 67)
                {
                    isobj12ValueDisabled = true;
                }
                else if (lineNumber == 107 && columnNumber == 36)
                {
                    isobj13TextDisabled = true;
                }
                else if (lineNumber == 47 && columnNumber == 61)
                {
                    isobj14TextDisabled = true;
                }
                else if (lineNumber == 48 && columnNumber == 32)
                {
                    isobj14VisibilityDisabled = true;
                }
                else if (lineNumber == 49 && columnNumber == 81)
                {
                    isobj15TextDisabled = true;
                }
                else if (lineNumber == 50 && columnNumber == 30)
                {
                    isobj15VisibilityDisabled = true;
                }
                else if (lineNumber == 53 && columnNumber == 61)
                {
                    isobj16TextDisabled = true;
                }
                else if (lineNumber == 54 && columnNumber == 32)
                {
                    isobj16VisibilityDisabled = true;
                }
                else if (lineNumber == 55 && columnNumber == 82)
                {
                    isobj17TextDisabled = true;
                }
                else if (lineNumber == 56 && columnNumber == 30)
                {
                    isobj17VisibilityDisabled = true;
                }
                else if (lineNumber == 59 && columnNumber == 61)
                {
                    isobj18TextDisabled = true;
                }
                else if (lineNumber == 60 && columnNumber == 32)
                {
                    isobj18VisibilityDisabled = true;
                }
                else if (lineNumber == 61 && columnNumber == 84)
                {
                    isobj19TextDisabled = true;
                }
                else if (lineNumber == 62 && columnNumber == 30)
                {
                    isobj19VisibilityDisabled = true;
                }
                else if (lineNumber == 65 && columnNumber == 61)
                {
                    isobj20TextDisabled = true;
                }
                else if (lineNumber == 66 && columnNumber == 32)
                {
                    isobj20VisibilityDisabled = true;
                }
                else if (lineNumber == 67 && columnNumber == 81)
                {
                    isobj21TextDisabled = true;
                }
                else if (lineNumber == 68 && columnNumber == 30)
                {
                    isobj21VisibilityDisabled = true;
                }
                else if (lineNumber == 71 && columnNumber == 61)
                {
                    isobj22TextDisabled = true;
                }
                else if (lineNumber == 72 && columnNumber == 32)
                {
                    isobj22VisibilityDisabled = true;
                }
                else if (lineNumber == 73 && columnNumber == 83)
                {
                    isobj23TextDisabled = true;
                }
                else if (lineNumber == 74 && columnNumber == 30)
                {
                    isobj23VisibilityDisabled = true;
                }
                else if (lineNumber == 77 && columnNumber == 61)
                {
                    isobj24TextDisabled = true;
                }
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 1: // Views\SongDetailsDialog.xaml line 1
                        this.obj1 = new global::System.WeakReference(global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.ContentDialog>(target));
                        break;
                    case 2: // Views\SongDetailsDialog.xaml line 20
                        this.obj2 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.InfoBar>(target);
                        break;
                    case 3: // Views\SongDetailsDialog.xaml line 176
                        this.obj3 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.TextBlock>(target);
                        break;
                    case 4: // Views\SongDetailsDialog.xaml line 152
                        this.obj4 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.TextBlock>(target);
                        break;
                    case 5: // Views\SongDetailsDialog.xaml line 147
                        this.obj5 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.TextBlock>(target);
                        break;
                    case 6: // Views\SongDetailsDialog.xaml line 141
                        this.obj6 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.TextBlock>(target);
                        break;
                    case 7: // Views\SongDetailsDialog.xaml line 98
                        this.obj7 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.TextBlock>(target);
                        break;
                    case 8: // Views\SongDetailsDialog.xaml line 100
                        this.obj8 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.NumberBox>(target);
                        this.bindingsTracking.RegisterTwoWayListener_8(this.obj8);
                        break;
                    case 9: // Views\SongDetailsDialog.xaml line 105
                        this.obj9 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.StackPanel>(target);
                        break;
                    case 10: // Views\SongDetailsDialog.xaml line 111
                        this.obj10 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.StackPanel>(target);
                        break;
                    case 11: // Views\SongDetailsDialog.xaml line 120
                        this.obj11 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.TextBlock>(target);
                        break;
                    case 12: // Views\SongDetailsDialog.xaml line 113
                        this.obj12 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.NumberBox>(target);
                        this.bindingsTracking.RegisterTwoWayListener_12(this.obj12);
                        break;
                    case 13: // Views\SongDetailsDialog.xaml line 107
                        this.obj13 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.TextBlock>(target);
                        break;
                    case 14: // Views\SongDetailsDialog.xaml line 47
                        this.obj14 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.TextBlock>(target);
                        break;
                    case 15: // Views\SongDetailsDialog.xaml line 49
                        this.obj15 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.TextBox>(target);
                        this.bindingsTracking.RegisterTwoWayListener_15(this.obj15);
                        break;
                    case 16: // Views\SongDetailsDialog.xaml line 53
                        this.obj16 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.TextBlock>(target);
                        break;
                    case 17: // Views\SongDetailsDialog.xaml line 55
                        this.obj17 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.TextBox>(target);
                        this.bindingsTracking.RegisterTwoWayListener_17(this.obj17);
                        break;
                    case 18: // Views\SongDetailsDialog.xaml line 59
                        this.obj18 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.TextBlock>(target);
                        break;
                    case 19: // Views\SongDetailsDialog.xaml line 61
                        this.obj19 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.TextBox>(target);
                        this.bindingsTracking.RegisterTwoWayListener_19(this.obj19);
                        break;
                    case 20: // Views\SongDetailsDialog.xaml line 65
                        this.obj20 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.TextBlock>(target);
                        break;
                    case 21: // Views\SongDetailsDialog.xaml line 67
                        this.obj21 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.TextBox>(target);
                        this.bindingsTracking.RegisterTwoWayListener_21(this.obj21);
                        break;
                    case 22: // Views\SongDetailsDialog.xaml line 71
                        this.obj22 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.TextBlock>(target);
                        break;
                    case 23: // Views\SongDetailsDialog.xaml line 73
                        this.obj23 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.TextBox>(target);
                        this.bindingsTracking.RegisterTwoWayListener_23(this.obj23);
                        break;
                    case 24: // Views\SongDetailsDialog.xaml line 77
                        this.obj24 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.TextBlock>(target);
                        break;
                    default:
                        break;
                }
            }
                        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2408")]
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
                        public global::Microsoft.UI.Xaml.Markup.IComponentConnector GetBindingConnector(int connectionId, object target) 
                        {
                            return null;
                        }

            // IDataTemplateComponent

            public void ProcessBindings(global::System.Object item, int itemIndex, int phase, out int nextPhase)
            {
                nextPhase = -1;
            }

            public void Recycle()
            {
                return;
            }

            // ISongDetailsDialog_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.initialized = false;
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                this.bindingsTracking.ReleaseAllListeners();
                if (newDataRoot != null)
                {
                    this.dataRoot = global::WinRT.CastExtensions.As<global::Karaoke.UI.Views.SongDetailsDialog>(newDataRoot);
                    return true;
                }
                return false;
            }

            public void Activated(object obj, global::Microsoft.UI.Xaml.WindowActivatedEventArgs data)
            {
                this.Initialize();
            }

            public void Loading(global::Microsoft.UI.Xaml.FrameworkElement src, object data)
            {
                this.Initialize();
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::Karaoke.UI.Views.SongDetailsDialog obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_PrimaryButtonText(obj.PrimaryButtonText, phase);
                        this.Update_SecondaryButtonText(obj.SecondaryButtonText, phase);
                        this.Update_ShowStatusMessage(obj.ShowStatusMessage, phase);
                        this.Update_StatusSeverity(obj.StatusSeverity, phase);
                        this.Update_StatusTitle(obj.StatusTitle, phase);
                        this.Update_StatusMessage(obj.StatusMessage, phase);
                        this.Update_Song(obj.Song, phase);
                        this.Update_NormalizationStatus(obj.NormalizationStatus, phase);
                        this.Update_NormalizationStatusColor(obj.NormalizationStatusColor, phase);
                        this.Update_GainText(obj.GainText, phase);
                        this.Update_LoudnessText(obj.LoudnessText, phase);
                        this.Update_IsViewMode(obj.IsViewMode, phase);
                        this.Update_EditedPriority(obj.EditedPriority, phase);
                        this.Update_IsEditMode(obj.IsEditMode, phase);
                        this.Update_EditedInstrumental(obj.EditedInstrumental, phase);
                        this.Update_EditedTitle(obj.EditedTitle, phase);
                        this.Update_EditedArtist(obj.EditedArtist, phase);
                        this.Update_EditedLanguage(obj.EditedLanguage, phase);
                        this.Update_EditedGenre(obj.EditedGenre, phase);
                        this.Update_EditedComment(obj.EditedComment, phase);
                    }
                }
            }
            private void Update_PrimaryButtonText(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\SongDetailsDialog.xaml line 1
                    if (!isobj1PrimaryButtonTextDisabled)
                    {
                        if ((this.obj1.Target as global::Microsoft.UI.Xaml.Controls.ContentDialog) != null)
                        {
                            XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_ContentDialog_PrimaryButtonText((this.obj1.Target as global::Microsoft.UI.Xaml.Controls.ContentDialog), obj, null);
                        }
                    }
                }
            }
            private void Update_SecondaryButtonText(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\SongDetailsDialog.xaml line 1
                    if (!isobj1SecondaryButtonTextDisabled)
                    {
                        if ((this.obj1.Target as global::Microsoft.UI.Xaml.Controls.ContentDialog) != null)
                        {
                            XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_ContentDialog_SecondaryButtonText((this.obj1.Target as global::Microsoft.UI.Xaml.Controls.ContentDialog), obj, null);
                        }
                    }
                }
            }
            private void Update_ShowStatusMessage(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\SongDetailsDialog.xaml line 20
                    if (!isobj2IsOpenDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_InfoBar_IsOpen(this.obj2, obj);
                    }
                }
            }
            private void Update_StatusSeverity(global::Microsoft.UI.Xaml.Controls.InfoBarSeverity obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\SongDetailsDialog.xaml line 20
                    if (!isobj2SeverityDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_InfoBar_Severity(this.obj2, obj);
                    }
                }
            }
            private void Update_StatusTitle(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\SongDetailsDialog.xaml line 20
                    if (!isobj2TitleDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_InfoBar_Title(this.obj2, obj, null);
                    }
                }
            }
            private void Update_StatusMessage(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\SongDetailsDialog.xaml line 20
                    if (!isobj2MessageDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_InfoBar_Message(this.obj2, obj, null);
                    }
                }
            }
            private void Update_Song(global::Karaoke.Common.Models.SongDto obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_Song_MediaPath(obj.MediaPath, phase);
                        this.Update_Song_Priority(obj.Priority, phase);
                        this.Update_Song_ChannelConfiguration(obj.ChannelConfiguration, phase);
                        this.Update_Song_Instrumental(obj.Instrumental, phase);
                        this.Update_Song_Title(obj.Title, phase);
                        this.Update_Song_Artist(obj.Artist, phase);
                        this.Update_Song_Language(obj.Language, phase);
                        this.Update_Song_Genre(obj.Genre, phase);
                        this.Update_Song_Comment(obj.Comment, phase);
                        this.Update_Song_Id(obj.Id, phase);
                    }
                }
            }
            private void Update_Song_MediaPath(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\SongDetailsDialog.xaml line 176
                    if (!isobj3TextDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_TextBlock_Text(this.obj3, obj, null);
                    }
                }
            }
            private void Update_NormalizationStatus(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\SongDetailsDialog.xaml line 152
                    if (!isobj4TextDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_TextBlock_Text(this.obj4, obj, null);
                    }
                }
            }
            private void Update_NormalizationStatusColor(global::Microsoft.UI.Xaml.Media.SolidColorBrush obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\SongDetailsDialog.xaml line 152
                    if (!isobj4ForegroundDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_TextBlock_Foreground(this.obj4, obj, null);
                    }
                }
            }
            private void Update_GainText(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\SongDetailsDialog.xaml line 147
                    if (!isobj5TextDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_TextBlock_Text(this.obj5, obj, null);
                    }
                }
            }
            private void Update_LoudnessText(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\SongDetailsDialog.xaml line 141
                    if (!isobj6TextDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_TextBlock_Text(this.obj6, obj, null);
                    }
                }
            }
            private void Update_Song_Priority(global::System.Int32 obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\SongDetailsDialog.xaml line 98
                    if (!isobj7TextDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_TextBlock_Text(this.obj7, obj.ToString(), null);
                    }
                }
            }
            private void Update_IsViewMode(global::Microsoft.UI.Xaml.Visibility obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\SongDetailsDialog.xaml line 98
                    if (!isobj7VisibilityDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_UIElement_Visibility(this.obj7, obj);
                    }
                    // Views\SongDetailsDialog.xaml line 105
                    if (!isobj9VisibilityDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_UIElement_Visibility(this.obj9, obj);
                    }
                    // Views\SongDetailsDialog.xaml line 47
                    if (!isobj14VisibilityDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_UIElement_Visibility(this.obj14, obj);
                    }
                    // Views\SongDetailsDialog.xaml line 53
                    if (!isobj16VisibilityDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_UIElement_Visibility(this.obj16, obj);
                    }
                    // Views\SongDetailsDialog.xaml line 59
                    if (!isobj18VisibilityDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_UIElement_Visibility(this.obj18, obj);
                    }
                    // Views\SongDetailsDialog.xaml line 65
                    if (!isobj20VisibilityDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_UIElement_Visibility(this.obj20, obj);
                    }
                    // Views\SongDetailsDialog.xaml line 71
                    if (!isobj22VisibilityDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_UIElement_Visibility(this.obj22, obj);
                    }
                }
            }
            private void Update_EditedPriority(global::System.Double obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\SongDetailsDialog.xaml line 100
                    if (!isobj8ValueDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_NumberBox_Value(this.obj8, obj);
                    }
                }
            }
            private void Update_IsEditMode(global::System.Boolean obj, int phase)
            {
                if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                {
                    this.Update_IsEditMode_Cast_IsEditMode_To_Visibility(obj ? global::Microsoft.UI.Xaml.Visibility.Visible : global::Microsoft.UI.Xaml.Visibility.Collapsed, phase);
                }
            }
            private void Update_IsEditMode_Cast_IsEditMode_To_Visibility(global::Microsoft.UI.Xaml.Visibility obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\SongDetailsDialog.xaml line 100
                    if (!isobj8VisibilityDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_UIElement_Visibility(this.obj8, obj);
                    }
                    // Views\SongDetailsDialog.xaml line 111
                    if (!isobj10VisibilityDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_UIElement_Visibility(this.obj10, obj);
                    }
                    // Views\SongDetailsDialog.xaml line 49
                    if (!isobj15VisibilityDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_UIElement_Visibility(this.obj15, obj);
                    }
                    // Views\SongDetailsDialog.xaml line 55
                    if (!isobj17VisibilityDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_UIElement_Visibility(this.obj17, obj);
                    }
                    // Views\SongDetailsDialog.xaml line 61
                    if (!isobj19VisibilityDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_UIElement_Visibility(this.obj19, obj);
                    }
                    // Views\SongDetailsDialog.xaml line 67
                    if (!isobj21VisibilityDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_UIElement_Visibility(this.obj21, obj);
                    }
                    // Views\SongDetailsDialog.xaml line 73
                    if (!isobj23VisibilityDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_UIElement_Visibility(this.obj23, obj);
                    }
                }
            }
            private void Update_Song_ChannelConfiguration(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\SongDetailsDialog.xaml line 120
                    if (!isobj11TextDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_TextBlock_Text(this.obj11, obj, null);
                    }
                }
            }
            private void Update_EditedInstrumental(global::System.Double obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\SongDetailsDialog.xaml line 113
                    if (!isobj12ValueDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_NumberBox_Value(this.obj12, obj);
                    }
                }
            }
            private void Update_Song_Instrumental(global::System.Int32 obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\SongDetailsDialog.xaml line 107
                    if (!isobj13TextDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_TextBlock_Text(this.obj13, obj.ToString(), null);
                    }
                }
            }
            private void Update_Song_Title(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\SongDetailsDialog.xaml line 47
                    if (!isobj14TextDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_TextBlock_Text(this.obj14, obj, null);
                    }
                }
            }
            private void Update_EditedTitle(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\SongDetailsDialog.xaml line 49
                    if (!isobj15TextDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_TextBox_Text(this.obj15, obj, null);
                    }
                }
            }
            private void Update_Song_Artist(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\SongDetailsDialog.xaml line 53
                    if (!isobj16TextDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_TextBlock_Text(this.obj16, obj, null);
                    }
                }
            }
            private void Update_EditedArtist(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\SongDetailsDialog.xaml line 55
                    if (!isobj17TextDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_TextBox_Text(this.obj17, obj, null);
                    }
                }
            }
            private void Update_Song_Language(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\SongDetailsDialog.xaml line 59
                    if (!isobj18TextDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_TextBlock_Text(this.obj18, obj, null);
                    }
                }
            }
            private void Update_EditedLanguage(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\SongDetailsDialog.xaml line 61
                    if (!isobj19TextDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_TextBox_Text(this.obj19, obj, null);
                    }
                }
            }
            private void Update_Song_Genre(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\SongDetailsDialog.xaml line 65
                    if (!isobj20TextDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_TextBlock_Text(this.obj20, obj, null);
                    }
                }
            }
            private void Update_EditedGenre(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\SongDetailsDialog.xaml line 67
                    if (!isobj21TextDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_TextBox_Text(this.obj21, obj, null);
                    }
                }
            }
            private void Update_Song_Comment(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\SongDetailsDialog.xaml line 71
                    if (!isobj22TextDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_TextBlock_Text(this.obj22, obj, null);
                    }
                }
            }
            private void Update_EditedComment(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\SongDetailsDialog.xaml line 73
                    if (!isobj23TextDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_TextBox_Text(this.obj23, obj, null);
                    }
                }
            }
            private void Update_Song_Id(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\SongDetailsDialog.xaml line 77
                    if (!isobj24TextDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_TextBlock_Text(this.obj24, obj, null);
                    }
                }
            }
            private void UpdateTwoWay_8_Value()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        this.dataRoot.EditedPriority = this.obj8.Value;
                    }
                }
            }
            private void UpdateTwoWay_12_Value()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        this.dataRoot.EditedInstrumental = this.obj12.Value;
                    }
                }
            }
            private void UpdateTwoWay_15_Text()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        this.dataRoot.EditedTitle = this.obj15.Text;
                    }
                }
            }
            private void UpdateTwoWay_17_Text()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        this.dataRoot.EditedArtist = this.obj17.Text;
                    }
                }
            }
            private void UpdateTwoWay_19_Text()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        this.dataRoot.EditedLanguage = this.obj19.Text;
                    }
                }
            }
            private void UpdateTwoWay_21_Text()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        this.dataRoot.EditedGenre = this.obj21.Text;
                    }
                }
            }
            private void UpdateTwoWay_23_Text()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        this.dataRoot.EditedComment = this.obj23.Text;
                    }
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2408")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private class SongDetailsDialog_obj1_BindingsTracking
            {
                private global::System.WeakReference<SongDetailsDialog_obj1_Bindings> weakRefToBindingObj; 

                public SongDetailsDialog_obj1_BindingsTracking(SongDetailsDialog_obj1_Bindings obj)
                {
                    weakRefToBindingObj = new global::System.WeakReference<SongDetailsDialog_obj1_Bindings>(obj);
                }

                public SongDetailsDialog_obj1_Bindings TryGetBindingObject()
                {
                    SongDetailsDialog_obj1_Bindings bindingObject = null;
                    if (weakRefToBindingObj != null)
                    {
                        weakRefToBindingObj.TryGetTarget(out bindingObject);
                        if (bindingObject == null)
                        {
                            weakRefToBindingObj = null;
                            ReleaseAllListeners();
                        }
                    }
                    return bindingObject;
                }

                public void ReleaseAllListeners()
                {
                    UpdateChildListeners_(null);
                }

                public void PropertyChanged_(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    SongDetailsDialog_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::Karaoke.UI.Views.SongDetailsDialog obj = sender as global::Karaoke.UI.Views.SongDetailsDialog;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_PrimaryButtonText(obj.PrimaryButtonText, DATA_CHANGED);
                                bindings.Update_SecondaryButtonText(obj.SecondaryButtonText, DATA_CHANGED);
                                bindings.Update_ShowStatusMessage(obj.ShowStatusMessage, DATA_CHANGED);
                                bindings.Update_StatusSeverity(obj.StatusSeverity, DATA_CHANGED);
                                bindings.Update_StatusTitle(obj.StatusTitle, DATA_CHANGED);
                                bindings.Update_StatusMessage(obj.StatusMessage, DATA_CHANGED);
                                bindings.Update_Song(obj.Song, DATA_CHANGED);
                                bindings.Update_NormalizationStatus(obj.NormalizationStatus, DATA_CHANGED);
                                bindings.Update_NormalizationStatusColor(obj.NormalizationStatusColor, DATA_CHANGED);
                                bindings.Update_GainText(obj.GainText, DATA_CHANGED);
                                bindings.Update_LoudnessText(obj.LoudnessText, DATA_CHANGED);
                                bindings.Update_IsViewMode(obj.IsViewMode, DATA_CHANGED);
                                bindings.Update_EditedPriority(obj.EditedPriority, DATA_CHANGED);
                                bindings.Update_IsEditMode(obj.IsEditMode, DATA_CHANGED);
                                bindings.Update_EditedInstrumental(obj.EditedInstrumental, DATA_CHANGED);
                                bindings.Update_EditedTitle(obj.EditedTitle, DATA_CHANGED);
                                bindings.Update_EditedArtist(obj.EditedArtist, DATA_CHANGED);
                                bindings.Update_EditedLanguage(obj.EditedLanguage, DATA_CHANGED);
                                bindings.Update_EditedGenre(obj.EditedGenre, DATA_CHANGED);
                                bindings.Update_EditedComment(obj.EditedComment, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "PrimaryButtonText":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_PrimaryButtonText(obj.PrimaryButtonText, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "SecondaryButtonText":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_SecondaryButtonText(obj.SecondaryButtonText, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "ShowStatusMessage":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ShowStatusMessage(obj.ShowStatusMessage, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "StatusSeverity":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_StatusSeverity(obj.StatusSeverity, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "StatusTitle":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_StatusTitle(obj.StatusTitle, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "StatusMessage":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_StatusMessage(obj.StatusMessage, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "Song":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_Song(obj.Song, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "NormalizationStatus":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_NormalizationStatus(obj.NormalizationStatus, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "NormalizationStatusColor":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_NormalizationStatusColor(obj.NormalizationStatusColor, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "GainText":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_GainText(obj.GainText, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "LoudnessText":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_LoudnessText(obj.LoudnessText, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsViewMode":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_IsViewMode(obj.IsViewMode, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "EditedPriority":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_EditedPriority(obj.EditedPriority, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsEditMode":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_IsEditMode(obj.IsEditMode, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "EditedInstrumental":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_EditedInstrumental(obj.EditedInstrumental, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "EditedTitle":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_EditedTitle(obj.EditedTitle, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "EditedArtist":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_EditedArtist(obj.EditedArtist, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "EditedLanguage":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_EditedLanguage(obj.EditedLanguage, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "EditedGenre":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_EditedGenre(obj.EditedGenre, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "EditedComment":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_EditedComment(obj.EditedComment, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                public void DependencyPropertyChanged_PrimaryButtonText(global::Microsoft.UI.Xaml.DependencyObject sender, global::Microsoft.UI.Xaml.DependencyProperty prop)
                {
                    SongDetailsDialog_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        global::Karaoke.UI.Views.SongDetailsDialog obj = sender as global::Karaoke.UI.Views.SongDetailsDialog;
                        if (obj != null)
                        {
                            bindings.Update_PrimaryButtonText(obj.PrimaryButtonText, DATA_CHANGED);
                        }
                    }
                }
                public void DependencyPropertyChanged_SecondaryButtonText(global::Microsoft.UI.Xaml.DependencyObject sender, global::Microsoft.UI.Xaml.DependencyProperty prop)
                {
                    SongDetailsDialog_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        global::Karaoke.UI.Views.SongDetailsDialog obj = sender as global::Karaoke.UI.Views.SongDetailsDialog;
                        if (obj != null)
                        {
                            bindings.Update_SecondaryButtonText(obj.SecondaryButtonText, DATA_CHANGED);
                        }
                    }
                }
                private long tokenDPC_PrimaryButtonText = 0;
                private long tokenDPC_SecondaryButtonText = 0;
                public void UpdateChildListeners_(global::Karaoke.UI.Views.SongDetailsDialog obj)
                {
                    SongDetailsDialog_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        if (bindings.dataRoot != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)bindings.dataRoot).PropertyChanged -= PropertyChanged_;
                            bindings.dataRoot.UnregisterPropertyChangedCallback(global::Karaoke.UI.Views.SongDetailsDialog.PrimaryButtonTextProperty, tokenDPC_PrimaryButtonText);
                            bindings.dataRoot.UnregisterPropertyChangedCallback(global::Karaoke.UI.Views.SongDetailsDialog.SecondaryButtonTextProperty, tokenDPC_SecondaryButtonText);
                        }
                        if (obj != null)
                        {
                            bindings.dataRoot = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_;
                            tokenDPC_PrimaryButtonText = obj.RegisterPropertyChangedCallback(global::Karaoke.UI.Views.SongDetailsDialog.PrimaryButtonTextProperty, DependencyPropertyChanged_PrimaryButtonText);
                            tokenDPC_SecondaryButtonText = obj.RegisterPropertyChangedCallback(global::Karaoke.UI.Views.SongDetailsDialog.SecondaryButtonTextProperty, DependencyPropertyChanged_SecondaryButtonText);
                        }
                    }
                }
                public void RegisterTwoWayListener_8(global::Microsoft.UI.Xaml.Controls.NumberBox sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::Microsoft.UI.Xaml.Controls.NumberBox.ValueProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_8_Value();
                        }
                    });
                }
                public void RegisterTwoWayListener_12(global::Microsoft.UI.Xaml.Controls.NumberBox sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::Microsoft.UI.Xaml.Controls.NumberBox.ValueProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_12_Value();
                        }
                    });
                }
                public void RegisterTwoWayListener_15(global::Microsoft.UI.Xaml.Controls.TextBox sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::Microsoft.UI.Xaml.Controls.TextBox.TextProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_15_Text();
                        }
                    });
                }
                public void RegisterTwoWayListener_17(global::Microsoft.UI.Xaml.Controls.TextBox sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::Microsoft.UI.Xaml.Controls.TextBox.TextProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_17_Text();
                        }
                    });
                }
                public void RegisterTwoWayListener_19(global::Microsoft.UI.Xaml.Controls.TextBox sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::Microsoft.UI.Xaml.Controls.TextBox.TextProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_19_Text();
                        }
                    });
                }
                public void RegisterTwoWayListener_21(global::Microsoft.UI.Xaml.Controls.TextBox sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::Microsoft.UI.Xaml.Controls.TextBox.TextProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_21_Text();
                        }
                    });
                }
                public void RegisterTwoWayListener_23(global::Microsoft.UI.Xaml.Controls.TextBox sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::Microsoft.UI.Xaml.Controls.TextBox.TextProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_23_Text();
                        }
                    });
                }
            }
        }

        /// <summary>
        /// Connect()
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2408")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Connect(int connectionId, object target)
        {
            switch(connectionId)
            {
            case 1: // Views\SongDetailsDialog.xaml line 1
                {
                    global::Microsoft.UI.Xaml.Controls.ContentDialog element1 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.ContentDialog>(target);
                    ((global::Microsoft.UI.Xaml.Controls.ContentDialog)element1).PrimaryButtonClick += this.OnPrimaryButtonClick;
                    ((global::Microsoft.UI.Xaml.Controls.ContentDialog)element1).SecondaryButtonClick += this.OnSecondaryButtonClick;
                }
                break;
            case 2: // Views\SongDetailsDialog.xaml line 20
                {
                    this.StatusInfoBar = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.InfoBar>(target);
                    ((global::Microsoft.UI.Xaml.Controls.InfoBar)this.StatusInfoBar).Closed += this.OnStatusInfoBarClosed;
                }
                break;
            case 8: // Views\SongDetailsDialog.xaml line 100
                {
                    this.PriorityNumberBox = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.NumberBox>(target);
                }
                break;
            case 12: // Views\SongDetailsDialog.xaml line 113
                {
                    this.InstrumentalNumberBox = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.NumberBox>(target);
                }
                break;
            case 15: // Views\SongDetailsDialog.xaml line 49
                {
                    this.TitleTextBox = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.TextBox>(target);
                }
                break;
            case 17: // Views\SongDetailsDialog.xaml line 55
                {
                    this.ArtistTextBox = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.TextBox>(target);
                }
                break;
            case 19: // Views\SongDetailsDialog.xaml line 61
                {
                    this.LanguageTextBox = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.TextBox>(target);
                }
                break;
            case 21: // Views\SongDetailsDialog.xaml line 67
                {
                    this.GenreTextBox = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.TextBox>(target);
                }
                break;
            case 23: // Views\SongDetailsDialog.xaml line 73
                {
                    this.CommentTextBox = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.TextBox>(target);
                }
                break;
            default:
                break;
            }
            this._contentLoaded = true;
        }

        /// <summary>
        /// GetBindingConnector(int connectionId, object target)
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2408")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.UI.Xaml.Markup.IComponentConnector GetBindingConnector(int connectionId, object target)
        {
            global::Microsoft.UI.Xaml.Markup.IComponentConnector returnValue = null;
            switch(connectionId)
            {
            case 1: // Views\SongDetailsDialog.xaml line 1
                {                    
                    global::Microsoft.UI.Xaml.Controls.ContentDialog element1 = (global::Microsoft.UI.Xaml.Controls.ContentDialog)target;
                    SongDetailsDialog_obj1_Bindings bindings = new SongDetailsDialog_obj1_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(this);
                    this.Bindings = bindings;
                    element1.Loading += bindings.Loading;
                    global::Microsoft.UI.Xaml.Markup.XamlBindingHelper.SetDataTemplateComponent(element1, bindings);
                }
                break;
            }
            return returnValue;
        }
    }
}

