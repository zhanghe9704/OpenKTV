#pragma checksum "D:\Work\Code\karaoke\src\UI\Karaoke.UI\MainWindow.xaml" "{8829d00f-11b8-4213-878b-770e8597ac16}" "24FEF3743E2D3F4B513D434C5CAC9E773937991B5422DF15C67BE7209CC1CD9A"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Karaoke.UI
{
    partial class MainWindow : 
        global::Microsoft.UI.Xaml.Window, 
        global::Microsoft.UI.Xaml.Markup.IComponentConnector
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2408")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private static class XamlBindingSetters
        {
            public static void Set_Microsoft_UI_Xaml_Controls_ItemsControl_ItemsSource(global::Microsoft.UI.Xaml.Controls.ItemsControl obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Microsoft.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                obj.ItemsSource = value;
            }
            public static void Set_Microsoft_UI_Xaml_Controls_Primitives_Selector_SelectedItem(global::Microsoft.UI.Xaml.Controls.Primitives.Selector obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Microsoft.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                obj.SelectedItem = value;
            }
            public static void Set_Microsoft_UI_Xaml_Controls_Primitives_Selector_SelectedIndex(global::Microsoft.UI.Xaml.Controls.Primitives.Selector obj, global::System.Int32 value)
            {
                obj.SelectedIndex = value;
            }
            public static void Set_Microsoft_UI_Xaml_Controls_Primitives_ButtonBase_Command(global::Microsoft.UI.Xaml.Controls.Primitives.ButtonBase obj, global::System.Windows.Input.ICommand value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Windows.Input.ICommand) global::Microsoft.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Windows.Input.ICommand), targetNullValue);
                }
                obj.Command = value;
            }
            public static void Set_Microsoft_UI_Xaml_Controls_NumberBox_Maximum(global::Microsoft.UI.Xaml.Controls.NumberBox obj, global::System.Double value)
            {
                obj.Maximum = value;
            }
            public static void Set_Microsoft_UI_Xaml_Controls_NumberBox_Value(global::Microsoft.UI.Xaml.Controls.NumberBox obj, global::System.Double value)
            {
                obj.Value = value;
            }
            public static void Set_Microsoft_UI_Xaml_Controls_TextBlock_Text(global::Microsoft.UI.Xaml.Controls.TextBlock obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.Text = value ?? global::System.String.Empty;
            }
            public static void Set_Microsoft_UI_Xaml_Controls_TextBox_Text(global::Microsoft.UI.Xaml.Controls.TextBox obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.Text = value ?? global::System.String.Empty;
            }
            public static void Set_Microsoft_UI_Xaml_Controls_ProgressRing_IsActive(global::Microsoft.UI.Xaml.Controls.ProgressRing obj, global::System.Boolean value)
            {
                obj.IsActive = value;
            }
            public static void Set_Microsoft_UI_Xaml_UIElement_Visibility(global::Microsoft.UI.Xaml.UIElement obj, global::Microsoft.UI.Xaml.Visibility value)
            {
                obj.Visibility = value;
            }
            public static void Set_Microsoft_UI_Xaml_Documents_Run_Text(global::Microsoft.UI.Xaml.Documents.Run obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.Text = value ?? global::System.String.Empty;
            }
        };

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2408")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private class MainWindow_obj1_Bindings :
            global::Microsoft.UI.Xaml.Markup.IDataTemplateComponent,
            global::Microsoft.UI.Xaml.Markup.IXamlBindScopeDiagnostics,
            global::Microsoft.UI.Xaml.Markup.IComponentConnector,
            IMainWindow_Bindings
        {
            private global::Karaoke.UI.MainWindow dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);

            // Fields for each control that has bindings.
            private global::Microsoft.UI.Xaml.Controls.ListView obj3;
            private global::Microsoft.UI.Xaml.Controls.Button obj4;
            private global::Microsoft.UI.Xaml.Controls.NumberBox obj5;
            private global::Microsoft.UI.Xaml.Controls.Button obj6;
            private global::Microsoft.UI.Xaml.Controls.TextBlock obj7;
            private global::Microsoft.UI.Xaml.Controls.Button obj8;
            private global::Microsoft.UI.Xaml.Controls.ListView obj11;
            private global::Microsoft.UI.Xaml.Controls.Button obj12;
            private global::Microsoft.UI.Xaml.Controls.NumberBox obj13;
            private global::Microsoft.UI.Xaml.Controls.Button obj14;
            private global::Microsoft.UI.Xaml.Controls.TextBlock obj15;
            private global::Microsoft.UI.Xaml.Controls.Button obj16;
            private global::Microsoft.UI.Xaml.Controls.TextBox obj19;
            private global::Microsoft.UI.Xaml.Controls.Button obj20;
            private global::Microsoft.UI.Xaml.Controls.ListView obj21;
            private global::Microsoft.UI.Xaml.Controls.Button obj22;
            private global::Microsoft.UI.Xaml.Controls.NumberBox obj23;
            private global::Microsoft.UI.Xaml.Controls.Button obj24;
            private global::Microsoft.UI.Xaml.Controls.TextBlock obj25;
            private global::Microsoft.UI.Xaml.Controls.TextBox obj26;
            private global::Microsoft.UI.Xaml.Controls.Button obj27;
            private global::Microsoft.UI.Xaml.Controls.ProgressRing obj28;
            private global::Microsoft.UI.Xaml.Documents.Run obj31;

            // Static fields for each binding's enabled/disabled state
            private static bool isobj3ItemsSourceDisabled = false;
            private static bool isobj3SelectedItemDisabled = false;
            private static bool isobj3SelectedIndexDisabled = false;
            private static bool isobj4CommandDisabled = false;
            private static bool isobj5MaximumDisabled = false;
            private static bool isobj5ValueDisabled = false;
            private static bool isobj6CommandDisabled = false;
            private static bool isobj7TextDisabled = false;
            private static bool isobj8CommandDisabled = false;
            private static bool isobj11ItemsSourceDisabled = false;
            private static bool isobj11SelectedItemDisabled = false;
            private static bool isobj12CommandDisabled = false;
            private static bool isobj13MaximumDisabled = false;
            private static bool isobj13ValueDisabled = false;
            private static bool isobj14CommandDisabled = false;
            private static bool isobj15TextDisabled = false;
            private static bool isobj16CommandDisabled = false;
            private static bool isobj19TextDisabled = false;
            private static bool isobj20CommandDisabled = false;
            private static bool isobj21ItemsSourceDisabled = false;
            private static bool isobj21SelectedItemDisabled = false;
            private static bool isobj22CommandDisabled = false;
            private static bool isobj23MaximumDisabled = false;
            private static bool isobj23ValueDisabled = false;
            private static bool isobj24CommandDisabled = false;
            private static bool isobj25TextDisabled = false;
            private static bool isobj26TextDisabled = false;
            private static bool isobj27CommandDisabled = false;
            private static bool isobj28IsActiveDisabled = false;
            private static bool isobj28VisibilityDisabled = false;
            private static bool isobj31TextDisabled = false;

            private MainWindow_obj1_BindingsTracking bindingsTracking;

            public MainWindow_obj1_Bindings()
            {
                this.bindingsTracking = new MainWindow_obj1_BindingsTracking(this);
            }

            public void Disable(int lineNumber, int columnNumber)
            {
                if (lineNumber == 327 && columnNumber == 21)
                {
                    isobj3ItemsSourceDisabled = true;
                }
                else if (lineNumber == 328 && columnNumber == 21)
                {
                    isobj3SelectedItemDisabled = true;
                }
                else if (lineNumber == 329 && columnNumber == 21)
                {
                    isobj3SelectedIndexDisabled = true;
                }
                else if (lineNumber == 364 && columnNumber == 45)
                {
                    isobj4CommandDisabled = true;
                }
                else if (lineNumber == 371 && columnNumber == 25)
                {
                    isobj5MaximumDisabled = true;
                }
                else if (lineNumber == 372 && columnNumber == 25)
                {
                    isobj5ValueDisabled = true;
                }
                else if (lineNumber == 374 && columnNumber == 45)
                {
                    isobj6CommandDisabled = true;
                }
                else if (lineNumber == 379 && columnNumber == 25)
                {
                    isobj7TextDisabled = true;
                }
                else if (lineNumber == 381 && columnNumber == 62)
                {
                    isobj8CommandDisabled = true;
                }
                else if (lineNumber == 255 && columnNumber == 21)
                {
                    isobj11ItemsSourceDisabled = true;
                }
                else if (lineNumber == 256 && columnNumber == 21)
                {
                    isobj11SelectedItemDisabled = true;
                }
                else if (lineNumber == 297 && columnNumber == 45)
                {
                    isobj12CommandDisabled = true;
                }
                else if (lineNumber == 304 && columnNumber == 25)
                {
                    isobj13MaximumDisabled = true;
                }
                else if (lineNumber == 305 && columnNumber == 25)
                {
                    isobj13ValueDisabled = true;
                }
                else if (lineNumber == 307 && columnNumber == 45)
                {
                    isobj14CommandDisabled = true;
                }
                else if (lineNumber == 312 && columnNumber == 25)
                {
                    isobj15TextDisabled = true;
                }
                else if (lineNumber == 314 && columnNumber == 68)
                {
                    isobj16CommandDisabled = true;
                }
                else if (lineNumber == 245 && columnNumber == 25)
                {
                    isobj19TextDisabled = true;
                }
                else if (lineNumber == 247 && columnNumber == 45)
                {
                    isobj20CommandDisabled = true;
                }
                else if (lineNumber == 201 && columnNumber == 21)
                {
                    isobj21ItemsSourceDisabled = true;
                }
                else if (lineNumber == 202 && columnNumber == 21)
                {
                    isobj21SelectedItemDisabled = true;
                }
                else if (lineNumber == 211 && columnNumber == 45)
                {
                    isobj22CommandDisabled = true;
                }
                else if (lineNumber == 218 && columnNumber == 25)
                {
                    isobj23MaximumDisabled = true;
                }
                else if (lineNumber == 219 && columnNumber == 25)
                {
                    isobj23ValueDisabled = true;
                }
                else if (lineNumber == 221 && columnNumber == 45)
                {
                    isobj24CommandDisabled = true;
                }
                else if (lineNumber == 226 && columnNumber == 25)
                {
                    isobj25TextDisabled = true;
                }
                else if (lineNumber == 193 && columnNumber == 25)
                {
                    isobj26TextDisabled = true;
                }
                else if (lineNumber == 195 && columnNumber == 45)
                {
                    isobj27CommandDisabled = true;
                }
                else if (lineNumber == 167 && columnNumber == 17)
                {
                    isobj28IsActiveDisabled = true;
                }
                else if (lineNumber == 168 && columnNumber == 17)
                {
                    isobj28VisibilityDisabled = true;
                }
                else if (lineNumber == 51 && columnNumber == 28)
                {
                    isobj31TextDisabled = true;
                }
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 3: // MainWindow.xaml line 324
                        this.obj3 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.ListView>(target);
                        this.bindingsTracking.RegisterTwoWayListener_3(this.obj3);
                        break;
                    case 4: // MainWindow.xaml line 364
                        this.obj4 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Button>(target);
                        break;
                    case 5: // MainWindow.xaml line 367
                        this.obj5 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.NumberBox>(target);
                        this.bindingsTracking.RegisterTwoWayListener_5(this.obj5);
                        break;
                    case 6: // MainWindow.xaml line 374
                        this.obj6 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Button>(target);
                        break;
                    case 7: // MainWindow.xaml line 377
                        this.obj7 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.TextBlock>(target);
                        break;
                    case 8: // MainWindow.xaml line 381
                        this.obj8 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Button>(target);
                        break;
                    case 11: // MainWindow.xaml line 251
                        this.obj11 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.ListView>(target);
                        this.bindingsTracking.RegisterTwoWayListener_11(this.obj11);
                        break;
                    case 12: // MainWindow.xaml line 297
                        this.obj12 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Button>(target);
                        break;
                    case 13: // MainWindow.xaml line 300
                        this.obj13 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.NumberBox>(target);
                        this.bindingsTracking.RegisterTwoWayListener_13(this.obj13);
                        break;
                    case 14: // MainWindow.xaml line 307
                        this.obj14 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Button>(target);
                        break;
                    case 15: // MainWindow.xaml line 310
                        this.obj15 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.TextBlock>(target);
                        break;
                    case 16: // MainWindow.xaml line 314
                        this.obj16 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Button>(target);
                        break;
                    case 19: // MainWindow.xaml line 243
                        this.obj19 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.TextBox>(target);
                        this.bindingsTracking.RegisterTwoWayListener_19(this.obj19);
                        break;
                    case 20: // MainWindow.xaml line 247
                        this.obj20 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Button>(target);
                        break;
                    case 21: // MainWindow.xaml line 199
                        this.obj21 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.ListView>(target);
                        this.bindingsTracking.RegisterTwoWayListener_21(this.obj21);
                        break;
                    case 22: // MainWindow.xaml line 211
                        this.obj22 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Button>(target);
                        break;
                    case 23: // MainWindow.xaml line 214
                        this.obj23 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.NumberBox>(target);
                        this.bindingsTracking.RegisterTwoWayListener_23(this.obj23);
                        break;
                    case 24: // MainWindow.xaml line 221
                        this.obj24 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Button>(target);
                        break;
                    case 25: // MainWindow.xaml line 224
                        this.obj25 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.TextBlock>(target);
                        break;
                    case 26: // MainWindow.xaml line 191
                        this.obj26 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.TextBox>(target);
                        this.bindingsTracking.RegisterTwoWayListener_26(this.obj26);
                        break;
                    case 27: // MainWindow.xaml line 195
                        this.obj27 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Button>(target);
                        break;
                    case 28: // MainWindow.xaml line 165
                        this.obj28 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.ProgressRing>(target);
                        break;
                    case 31: // MainWindow.xaml line 51
                        this.obj31 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Documents.Run>(target);
                        break;
                    default:
                        break;
                }
            }
                        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2408")]
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
                        public global::Microsoft.UI.Xaml.Markup.IComponentConnector GetBindingConnector(int connectionId, object target) 
                        {
                            return null;
                        }

            // IDataTemplateComponent

            public void ProcessBindings(global::System.Object item, int itemIndex, int phase, out int nextPhase)
            {
                nextPhase = -1;
            }

            public void Recycle()
            {
                return;
            }

            // IMainWindow_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.initialized = false;
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                this.bindingsTracking.ReleaseAllListeners();
                if (newDataRoot != null)
                {
                    this.dataRoot = global::WinRT.CastExtensions.As<global::Karaoke.UI.MainWindow>(newDataRoot);
                    return true;
                }
                return false;
            }

            public void Activated(object obj, global::Microsoft.UI.Xaml.WindowActivatedEventArgs data)
            {
                this.Initialize();
            }

            public void Loading(global::Microsoft.UI.Xaml.FrameworkElement src, object data)
            {
                this.Initialize();
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::Karaoke.UI.MainWindow obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel(obj.ViewModel, phase);
                        this.Update_VolumeSlider(obj.VolumeSlider, phase);
                    }
                }
            }
            private void Update_ViewModel(global::Karaoke.UI.ViewModels.MainViewModel obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_ViewModel(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_Queue(obj.Queue, phase);
                        this.Update_ViewModel_SelectedQueuedSong(obj.SelectedQueuedSong, phase);
                        this.Update_ViewModel_SelectedQueuedSongIndex(obj.SelectedQueuedSongIndex, phase);
                    }
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_QueuePreviousPageCommand(obj.QueuePreviousPageCommand, phase);
                    }
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_QueueTotalPages(obj.QueueTotalPages, phase);
                        this.Update_ViewModel_QueuePageNumber(obj.QueuePageNumber, phase);
                    }
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_QueueNextPageCommand(obj.QueueNextPageCommand, phase);
                    }
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_QueuePageSummary(obj.QueuePageSummary, phase);
                    }
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_RemoveFromQueueCommand(obj.RemoveFromQueueCommand, phase);
                    }
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_FilteredSongs(obj.FilteredSongs, phase);
                        this.Update_ViewModel_SelectedSong(obj.SelectedSong, phase);
                    }
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_SongsPreviousPageCommand(obj.SongsPreviousPageCommand, phase);
                    }
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_SongsTotalPages(obj.SongsTotalPages, phase);
                        this.Update_ViewModel_SongsPageNumber(obj.SongsPageNumber, phase);
                    }
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_SongsNextPageCommand(obj.SongsNextPageCommand, phase);
                    }
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_SongsPageSummary(obj.SongsPageSummary, phase);
                    }
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_AddToQueueCommand(obj.AddToQueueCommand, phase);
                    }
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_SongSearchText(obj.SongSearchText, phase);
                    }
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_SearchSongsCommand(obj.SearchSongsCommand, phase);
                    }
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_Artists(obj.Artists, phase);
                        this.Update_ViewModel_SelectedArtist(obj.SelectedArtist, phase);
                    }
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_ArtistsPreviousPageCommand(obj.ArtistsPreviousPageCommand, phase);
                    }
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_ArtistsTotalPages(obj.ArtistsTotalPages, phase);
                        this.Update_ViewModel_ArtistsPageNumber(obj.ArtistsPageNumber, phase);
                    }
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_ArtistsNextPageCommand(obj.ArtistsNextPageCommand, phase);
                    }
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_ArtistsPageSummary(obj.ArtistsPageSummary, phase);
                        this.Update_ViewModel_ArtistSearchText(obj.ArtistSearchText, phase);
                    }
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_SearchArtistsCommand(obj.SearchArtistsCommand, phase);
                    }
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_IsLoading(obj.IsLoading, phase);
                        this.Update_ViewModel_LoadingVisibility(obj.LoadingVisibility, phase);
                    }
                }
            }
            private void Update_ViewModel_Queue(global::System.Collections.ObjectModel.ObservableCollection<global::Karaoke.Common.Models.SongDto> obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_ViewModel_Queue(obj);
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // MainWindow.xaml line 324
                    if (!isobj3ItemsSourceDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_ItemsControl_ItemsSource(this.obj3, obj, null);
                    }
                }
            }
            private void Update_ViewModel_SelectedQueuedSong(global::Karaoke.Common.Models.SongDto obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // MainWindow.xaml line 324
                    if (!isobj3SelectedItemDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_Primitives_Selector_SelectedItem(this.obj3, obj, null);
                    }
                }
            }
            private void Update_ViewModel_SelectedQueuedSongIndex(global::System.Int32 obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // MainWindow.xaml line 324
                    if (!isobj3SelectedIndexDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_Primitives_Selector_SelectedIndex(this.obj3, obj);
                    }
                }
            }
            private void Update_ViewModel_QueuePreviousPageCommand(global::CommunityToolkit.Mvvm.Input.IRelayCommand obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // MainWindow.xaml line 364
                    if (!isobj4CommandDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_Primitives_ButtonBase_Command(this.obj4, obj, null);
                    }
                }
            }
            private void Update_ViewModel_QueueTotalPages(global::System.Int32 obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // MainWindow.xaml line 367
                    if (!isobj5MaximumDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_NumberBox_Maximum(this.obj5, obj);
                    }
                }
            }
            private void Update_ViewModel_QueuePageNumber(global::System.Double obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // MainWindow.xaml line 367
                    if (!isobj5ValueDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_NumberBox_Value(this.obj5, obj);
                    }
                }
            }
            private void Update_ViewModel_QueueNextPageCommand(global::CommunityToolkit.Mvvm.Input.IRelayCommand obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // MainWindow.xaml line 374
                    if (!isobj6CommandDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_Primitives_ButtonBase_Command(this.obj6, obj, null);
                    }
                }
            }
            private void Update_ViewModel_QueuePageSummary(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // MainWindow.xaml line 377
                    if (!isobj7TextDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_TextBlock_Text(this.obj7, obj, null);
                    }
                }
            }
            private void Update_ViewModel_RemoveFromQueueCommand(global::CommunityToolkit.Mvvm.Input.IRelayCommand obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // MainWindow.xaml line 381
                    if (!isobj8CommandDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_Primitives_ButtonBase_Command(this.obj8, obj, null);
                    }
                }
            }
            private void Update_ViewModel_FilteredSongs(global::System.Collections.ObjectModel.ObservableCollection<global::Karaoke.Common.Models.SongDto> obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_ViewModel_FilteredSongs(obj);
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // MainWindow.xaml line 251
                    if (!isobj11ItemsSourceDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_ItemsControl_ItemsSource(this.obj11, obj, null);
                    }
                }
            }
            private void Update_ViewModel_SelectedSong(global::Karaoke.Common.Models.SongDto obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // MainWindow.xaml line 251
                    if (!isobj11SelectedItemDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_Primitives_Selector_SelectedItem(this.obj11, obj, null);
                    }
                }
            }
            private void Update_ViewModel_SongsPreviousPageCommand(global::CommunityToolkit.Mvvm.Input.IRelayCommand obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // MainWindow.xaml line 297
                    if (!isobj12CommandDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_Primitives_ButtonBase_Command(this.obj12, obj, null);
                    }
                }
            }
            private void Update_ViewModel_SongsTotalPages(global::System.Int32 obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // MainWindow.xaml line 300
                    if (!isobj13MaximumDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_NumberBox_Maximum(this.obj13, obj);
                    }
                }
            }
            private void Update_ViewModel_SongsPageNumber(global::System.Double obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // MainWindow.xaml line 300
                    if (!isobj13ValueDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_NumberBox_Value(this.obj13, obj);
                    }
                }
            }
            private void Update_ViewModel_SongsNextPageCommand(global::CommunityToolkit.Mvvm.Input.IRelayCommand obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // MainWindow.xaml line 307
                    if (!isobj14CommandDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_Primitives_ButtonBase_Command(this.obj14, obj, null);
                    }
                }
            }
            private void Update_ViewModel_SongsPageSummary(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // MainWindow.xaml line 310
                    if (!isobj15TextDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_TextBlock_Text(this.obj15, obj, null);
                    }
                }
            }
            private void Update_ViewModel_AddToQueueCommand(global::CommunityToolkit.Mvvm.Input.IAsyncRelayCommand obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // MainWindow.xaml line 314
                    if (!isobj16CommandDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_Primitives_ButtonBase_Command(this.obj16, obj, null);
                    }
                }
            }
            private void Update_ViewModel_SongSearchText(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // MainWindow.xaml line 243
                    if (!isobj19TextDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_TextBox_Text(this.obj19, obj, null);
                    }
                }
            }
            private void Update_ViewModel_SearchSongsCommand(global::CommunityToolkit.Mvvm.Input.IRelayCommand obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // MainWindow.xaml line 247
                    if (!isobj20CommandDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_Primitives_ButtonBase_Command(this.obj20, obj, null);
                    }
                }
            }
            private void Update_ViewModel_Artists(global::System.Collections.ObjectModel.ObservableCollection<global::System.String> obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_ViewModel_Artists(obj);
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // MainWindow.xaml line 199
                    if (!isobj21ItemsSourceDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_ItemsControl_ItemsSource(this.obj21, obj, null);
                    }
                }
            }
            private void Update_ViewModel_SelectedArtist(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // MainWindow.xaml line 199
                    if (!isobj21SelectedItemDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_Primitives_Selector_SelectedItem(this.obj21, obj, null);
                    }
                }
            }
            private void Update_ViewModel_ArtistsPreviousPageCommand(global::CommunityToolkit.Mvvm.Input.IRelayCommand obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // MainWindow.xaml line 211
                    if (!isobj22CommandDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_Primitives_ButtonBase_Command(this.obj22, obj, null);
                    }
                }
            }
            private void Update_ViewModel_ArtistsTotalPages(global::System.Int32 obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // MainWindow.xaml line 214
                    if (!isobj23MaximumDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_NumberBox_Maximum(this.obj23, obj);
                    }
                }
            }
            private void Update_ViewModel_ArtistsPageNumber(global::System.Double obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // MainWindow.xaml line 214
                    if (!isobj23ValueDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_NumberBox_Value(this.obj23, obj);
                    }
                }
            }
            private void Update_ViewModel_ArtistsNextPageCommand(global::CommunityToolkit.Mvvm.Input.IRelayCommand obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // MainWindow.xaml line 221
                    if (!isobj24CommandDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_Primitives_ButtonBase_Command(this.obj24, obj, null);
                    }
                }
            }
            private void Update_ViewModel_ArtistsPageSummary(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // MainWindow.xaml line 224
                    if (!isobj25TextDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_TextBlock_Text(this.obj25, obj, null);
                    }
                }
            }
            private void Update_ViewModel_ArtistSearchText(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // MainWindow.xaml line 191
                    if (!isobj26TextDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_TextBox_Text(this.obj26, obj, null);
                    }
                }
            }
            private void Update_ViewModel_SearchArtistsCommand(global::CommunityToolkit.Mvvm.Input.IRelayCommand obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // MainWindow.xaml line 195
                    if (!isobj27CommandDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_Primitives_ButtonBase_Command(this.obj27, obj, null);
                    }
                }
            }
            private void Update_ViewModel_IsLoading(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // MainWindow.xaml line 165
                    if (!isobj28IsActiveDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_ProgressRing_IsActive(this.obj28, obj);
                    }
                }
            }
            private void Update_ViewModel_LoadingVisibility(global::Microsoft.UI.Xaml.Visibility obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // MainWindow.xaml line 165
                    if (!isobj28VisibilityDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_UIElement_Visibility(this.obj28, obj);
                    }
                }
            }
            private void Update_VolumeSlider(global::Microsoft.UI.Xaml.Controls.Slider obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_VolumeSlider(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_VolumeSlider_Value(obj.Value, phase);
                    }
                }
            }
            private void Update_VolumeSlider_Value(global::System.Double obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // MainWindow.xaml line 51
                    if (!isobj31TextDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Documents_Run_Text(this.obj31, obj.ToString(), null);
                    }
                }
            }
            private void UpdateTwoWay_3_SelectedItem()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        if (this.dataRoot.ViewModel != null)
                        {
                            this.dataRoot.ViewModel.SelectedQueuedSong = (global::Karaoke.Common.Models.SongDto)this.obj3.SelectedItem;
                        }
                    }
                }
            }
            private void UpdateTwoWay_3_SelectedIndex()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        if (this.dataRoot.ViewModel != null)
                        {
                            this.dataRoot.ViewModel.SelectedQueuedSongIndex = this.obj3.SelectedIndex;
                        }
                    }
                }
            }
            private void UpdateTwoWay_5_Value()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        if (this.dataRoot.ViewModel != null)
                        {
                            this.dataRoot.ViewModel.QueuePageNumber = this.obj5.Value;
                        }
                    }
                }
            }
            private void UpdateTwoWay_11_SelectedItem()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        if (this.dataRoot.ViewModel != null)
                        {
                            this.dataRoot.ViewModel.SelectedSong = (global::Karaoke.Common.Models.SongDto)this.obj11.SelectedItem;
                        }
                    }
                }
            }
            private void UpdateTwoWay_13_Value()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        if (this.dataRoot.ViewModel != null)
                        {
                            this.dataRoot.ViewModel.SongsPageNumber = this.obj13.Value;
                        }
                    }
                }
            }
            private void UpdateTwoWay_19_Text()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        if (this.dataRoot.ViewModel != null)
                        {
                            this.dataRoot.ViewModel.SongSearchText = this.obj19.Text;
                        }
                    }
                }
            }
            private void UpdateTwoWay_21_SelectedItem()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        if (this.dataRoot.ViewModel != null)
                        {
                            this.dataRoot.ViewModel.SelectedArtist = (global::System.String)this.obj21.SelectedItem;
                        }
                    }
                }
            }
            private void UpdateTwoWay_23_Value()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        if (this.dataRoot.ViewModel != null)
                        {
                            this.dataRoot.ViewModel.ArtistsPageNumber = this.obj23.Value;
                        }
                    }
                }
            }
            private void UpdateTwoWay_26_Text()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        if (this.dataRoot.ViewModel != null)
                        {
                            this.dataRoot.ViewModel.ArtistSearchText = this.obj26.Text;
                        }
                    }
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2408")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private class MainWindow_obj1_BindingsTracking
            {
                private global::System.WeakReference<MainWindow_obj1_Bindings> weakRefToBindingObj; 

                public MainWindow_obj1_BindingsTracking(MainWindow_obj1_Bindings obj)
                {
                    weakRefToBindingObj = new global::System.WeakReference<MainWindow_obj1_Bindings>(obj);
                }

                public MainWindow_obj1_Bindings TryGetBindingObject()
                {
                    MainWindow_obj1_Bindings bindingObject = null;
                    if (weakRefToBindingObj != null)
                    {
                        weakRefToBindingObj.TryGetTarget(out bindingObject);
                        if (bindingObject == null)
                        {
                            weakRefToBindingObj = null;
                            ReleaseAllListeners();
                        }
                    }
                    return bindingObject;
                }

                public void ReleaseAllListeners()
                {
                    UpdateChildListeners_ViewModel(null);
                    UpdateChildListeners_ViewModel_Queue(null);
                    UpdateChildListeners_ViewModel_FilteredSongs(null);
                    UpdateChildListeners_ViewModel_Artists(null);
                    UpdateChildListeners_VolumeSlider(null);
                }

                public void PropertyChanged_ViewModel(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    MainWindow_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::Karaoke.UI.ViewModels.MainViewModel obj = sender as global::Karaoke.UI.ViewModels.MainViewModel;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_ViewModel_Queue(obj.Queue, DATA_CHANGED);
                                bindings.Update_ViewModel_SelectedQueuedSong(obj.SelectedQueuedSong, DATA_CHANGED);
                                bindings.Update_ViewModel_SelectedQueuedSongIndex(obj.SelectedQueuedSongIndex, DATA_CHANGED);
                                bindings.Update_ViewModel_QueueTotalPages(obj.QueueTotalPages, DATA_CHANGED);
                                bindings.Update_ViewModel_QueuePageNumber(obj.QueuePageNumber, DATA_CHANGED);
                                bindings.Update_ViewModel_QueuePageSummary(obj.QueuePageSummary, DATA_CHANGED);
                                bindings.Update_ViewModel_FilteredSongs(obj.FilteredSongs, DATA_CHANGED);
                                bindings.Update_ViewModel_SelectedSong(obj.SelectedSong, DATA_CHANGED);
                                bindings.Update_ViewModel_SongsTotalPages(obj.SongsTotalPages, DATA_CHANGED);
                                bindings.Update_ViewModel_SongsPageNumber(obj.SongsPageNumber, DATA_CHANGED);
                                bindings.Update_ViewModel_SongsPageSummary(obj.SongsPageSummary, DATA_CHANGED);
                                bindings.Update_ViewModel_SongSearchText(obj.SongSearchText, DATA_CHANGED);
                                bindings.Update_ViewModel_Artists(obj.Artists, DATA_CHANGED);
                                bindings.Update_ViewModel_SelectedArtist(obj.SelectedArtist, DATA_CHANGED);
                                bindings.Update_ViewModel_ArtistsTotalPages(obj.ArtistsTotalPages, DATA_CHANGED);
                                bindings.Update_ViewModel_ArtistsPageNumber(obj.ArtistsPageNumber, DATA_CHANGED);
                                bindings.Update_ViewModel_ArtistsPageSummary(obj.ArtistsPageSummary, DATA_CHANGED);
                                bindings.Update_ViewModel_ArtistSearchText(obj.ArtistSearchText, DATA_CHANGED);
                                bindings.Update_ViewModel_IsLoading(obj.IsLoading, DATA_CHANGED);
                                bindings.Update_ViewModel_LoadingVisibility(obj.LoadingVisibility, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "Queue":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_Queue(obj.Queue, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "SelectedQueuedSong":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_SelectedQueuedSong(obj.SelectedQueuedSong, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "SelectedQueuedSongIndex":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_SelectedQueuedSongIndex(obj.SelectedQueuedSongIndex, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "QueueTotalPages":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_QueueTotalPages(obj.QueueTotalPages, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "QueuePageNumber":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_QueuePageNumber(obj.QueuePageNumber, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "QueuePageSummary":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_QueuePageSummary(obj.QueuePageSummary, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "FilteredSongs":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_FilteredSongs(obj.FilteredSongs, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "SelectedSong":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_SelectedSong(obj.SelectedSong, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "SongsTotalPages":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_SongsTotalPages(obj.SongsTotalPages, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "SongsPageNumber":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_SongsPageNumber(obj.SongsPageNumber, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "SongsPageSummary":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_SongsPageSummary(obj.SongsPageSummary, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "SongSearchText":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_SongSearchText(obj.SongSearchText, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "Artists":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_Artists(obj.Artists, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "SelectedArtist":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_SelectedArtist(obj.SelectedArtist, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "ArtistsTotalPages":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_ArtistsTotalPages(obj.ArtistsTotalPages, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "ArtistsPageNumber":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_ArtistsPageNumber(obj.ArtistsPageNumber, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "ArtistsPageSummary":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_ArtistsPageSummary(obj.ArtistsPageSummary, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "ArtistSearchText":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_ArtistSearchText(obj.ArtistSearchText, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsLoading":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_IsLoading(obj.IsLoading, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "LoadingVisibility":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_LoadingVisibility(obj.LoadingVisibility, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::Karaoke.UI.ViewModels.MainViewModel cache_ViewModel = null;
                public void UpdateChildListeners_ViewModel(global::Karaoke.UI.ViewModels.MainViewModel obj)
                {
                    if (obj != cache_ViewModel)
                    {
                        if (cache_ViewModel != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_ViewModel).PropertyChanged -= PropertyChanged_ViewModel;
                            cache_ViewModel = null;
                        }
                        if (obj != null)
                        {
                            cache_ViewModel = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_ViewModel;
                        }
                    }
                }
                public void PropertyChanged_ViewModel_Queue(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    MainWindow_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::System.Collections.ObjectModel.ObservableCollection<global::Karaoke.Common.Models.SongDto> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::Karaoke.Common.Models.SongDto>;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                        }
                        else
                        {
                            switch (propName)
                            {
                                default:
                                    break;
                            }
                        }
                    }
                }
                public void CollectionChanged_ViewModel_Queue(object sender, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    MainWindow_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        global::System.Collections.ObjectModel.ObservableCollection<global::Karaoke.Common.Models.SongDto> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::Karaoke.Common.Models.SongDto>;
                    }
                }
                private global::System.Collections.ObjectModel.ObservableCollection<global::Karaoke.Common.Models.SongDto> cache_ViewModel_Queue = null;
                public void UpdateChildListeners_ViewModel_Queue(global::System.Collections.ObjectModel.ObservableCollection<global::Karaoke.Common.Models.SongDto> obj)
                {
                    if (obj != cache_ViewModel_Queue)
                    {
                        if (cache_ViewModel_Queue != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_ViewModel_Queue).PropertyChanged -= PropertyChanged_ViewModel_Queue;
                            ((global::System.Collections.Specialized.INotifyCollectionChanged)cache_ViewModel_Queue).CollectionChanged -= CollectionChanged_ViewModel_Queue;
                            cache_ViewModel_Queue = null;
                        }
                        if (obj != null)
                        {
                            cache_ViewModel_Queue = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_ViewModel_Queue;
                            ((global::System.Collections.Specialized.INotifyCollectionChanged)obj).CollectionChanged += CollectionChanged_ViewModel_Queue;
                        }
                    }
                }
                public void PropertyChanged_ViewModel_FilteredSongs(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    MainWindow_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::System.Collections.ObjectModel.ObservableCollection<global::Karaoke.Common.Models.SongDto> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::Karaoke.Common.Models.SongDto>;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                        }
                        else
                        {
                            switch (propName)
                            {
                                default:
                                    break;
                            }
                        }
                    }
                }
                public void CollectionChanged_ViewModel_FilteredSongs(object sender, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    MainWindow_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        global::System.Collections.ObjectModel.ObservableCollection<global::Karaoke.Common.Models.SongDto> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::Karaoke.Common.Models.SongDto>;
                    }
                }
                private global::System.Collections.ObjectModel.ObservableCollection<global::Karaoke.Common.Models.SongDto> cache_ViewModel_FilteredSongs = null;
                public void UpdateChildListeners_ViewModel_FilteredSongs(global::System.Collections.ObjectModel.ObservableCollection<global::Karaoke.Common.Models.SongDto> obj)
                {
                    if (obj != cache_ViewModel_FilteredSongs)
                    {
                        if (cache_ViewModel_FilteredSongs != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_ViewModel_FilteredSongs).PropertyChanged -= PropertyChanged_ViewModel_FilteredSongs;
                            ((global::System.Collections.Specialized.INotifyCollectionChanged)cache_ViewModel_FilteredSongs).CollectionChanged -= CollectionChanged_ViewModel_FilteredSongs;
                            cache_ViewModel_FilteredSongs = null;
                        }
                        if (obj != null)
                        {
                            cache_ViewModel_FilteredSongs = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_ViewModel_FilteredSongs;
                            ((global::System.Collections.Specialized.INotifyCollectionChanged)obj).CollectionChanged += CollectionChanged_ViewModel_FilteredSongs;
                        }
                    }
                }
                public void PropertyChanged_ViewModel_Artists(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    MainWindow_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::System.Collections.ObjectModel.ObservableCollection<global::System.String> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::System.String>;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                        }
                        else
                        {
                            switch (propName)
                            {
                                default:
                                    break;
                            }
                        }
                    }
                }
                public void CollectionChanged_ViewModel_Artists(object sender, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    MainWindow_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        global::System.Collections.ObjectModel.ObservableCollection<global::System.String> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::System.String>;
                    }
                }
                private global::System.Collections.ObjectModel.ObservableCollection<global::System.String> cache_ViewModel_Artists = null;
                public void UpdateChildListeners_ViewModel_Artists(global::System.Collections.ObjectModel.ObservableCollection<global::System.String> obj)
                {
                    if (obj != cache_ViewModel_Artists)
                    {
                        if (cache_ViewModel_Artists != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_ViewModel_Artists).PropertyChanged -= PropertyChanged_ViewModel_Artists;
                            ((global::System.Collections.Specialized.INotifyCollectionChanged)cache_ViewModel_Artists).CollectionChanged -= CollectionChanged_ViewModel_Artists;
                            cache_ViewModel_Artists = null;
                        }
                        if (obj != null)
                        {
                            cache_ViewModel_Artists = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_ViewModel_Artists;
                            ((global::System.Collections.Specialized.INotifyCollectionChanged)obj).CollectionChanged += CollectionChanged_ViewModel_Artists;
                        }
                    }
                }
                public void DependencyPropertyChanged_VolumeSlider_Value(global::Microsoft.UI.Xaml.DependencyObject sender, global::Microsoft.UI.Xaml.DependencyProperty prop)
                {
                    MainWindow_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        global::Microsoft.UI.Xaml.Controls.Slider obj = sender as global::Microsoft.UI.Xaml.Controls.Slider;
                        if (obj != null)
                        {
                            bindings.Update_VolumeSlider_Value(obj.Value, DATA_CHANGED);
                        }
                    }
                }
                private global::Microsoft.UI.Xaml.Controls.Slider cache_VolumeSlider = null;
                private long tokenDPC_VolumeSlider_Value = 0;
                public void UpdateChildListeners_VolumeSlider(global::Microsoft.UI.Xaml.Controls.Slider obj)
                {
                    if (obj != cache_VolumeSlider)
                    {
                        if (cache_VolumeSlider != null)
                        {
                            cache_VolumeSlider.UnregisterPropertyChangedCallback(global::Microsoft.UI.Xaml.Controls.Primitives.RangeBase.ValueProperty, tokenDPC_VolumeSlider_Value);
                            cache_VolumeSlider = null;
                        }
                        if (obj != null)
                        {
                            cache_VolumeSlider = obj;
                            tokenDPC_VolumeSlider_Value = obj.RegisterPropertyChangedCallback(global::Microsoft.UI.Xaml.Controls.Primitives.RangeBase.ValueProperty, DependencyPropertyChanged_VolumeSlider_Value);
                        }
                    }
                }
                public void RegisterTwoWayListener_3(global::Microsoft.UI.Xaml.Controls.ListView sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::Microsoft.UI.Xaml.Controls.Primitives.Selector.SelectedItemProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_3_SelectedItem();
                        }
                    });
                    sourceObject.RegisterPropertyChangedCallback(global::Microsoft.UI.Xaml.Controls.Primitives.Selector.SelectedIndexProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_3_SelectedIndex();
                        }
                    });
                }
                public void RegisterTwoWayListener_5(global::Microsoft.UI.Xaml.Controls.NumberBox sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::Microsoft.UI.Xaml.Controls.NumberBox.ValueProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_5_Value();
                        }
                    });
                }
                public void RegisterTwoWayListener_11(global::Microsoft.UI.Xaml.Controls.ListView sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::Microsoft.UI.Xaml.Controls.Primitives.Selector.SelectedItemProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_11_SelectedItem();
                        }
                    });
                }
                public void RegisterTwoWayListener_13(global::Microsoft.UI.Xaml.Controls.NumberBox sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::Microsoft.UI.Xaml.Controls.NumberBox.ValueProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_13_Value();
                        }
                    });
                }
                public void RegisterTwoWayListener_19(global::Microsoft.UI.Xaml.Controls.TextBox sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::Microsoft.UI.Xaml.Controls.TextBox.TextProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_19_Text();
                        }
                    });
                }
                public void RegisterTwoWayListener_21(global::Microsoft.UI.Xaml.Controls.ListView sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::Microsoft.UI.Xaml.Controls.Primitives.Selector.SelectedItemProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_21_SelectedItem();
                        }
                    });
                }
                public void RegisterTwoWayListener_23(global::Microsoft.UI.Xaml.Controls.NumberBox sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::Microsoft.UI.Xaml.Controls.NumberBox.ValueProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_23_Value();
                        }
                    });
                }
                public void RegisterTwoWayListener_26(global::Microsoft.UI.Xaml.Controls.TextBox sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::Microsoft.UI.Xaml.Controls.TextBox.TextProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_26_Text();
                        }
                    });
                }
            }
        }

        /// <summary>
        /// Connect()
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2408")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Connect(int connectionId, object target)
        {
            switch(connectionId)
            {
            case 2: // MainWindow.xaml line 8
                {
                    global::Microsoft.UI.Xaml.Controls.Grid element2 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Grid>(target);
                    ((global::Microsoft.UI.Xaml.Controls.Grid)element2).PreviewKeyDown += this.OnWindowKeyDown;
                }
                break;
            case 3: // MainWindow.xaml line 324
                {
                    this.QueueListView = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.ListView>(target);
                    ((global::Microsoft.UI.Xaml.Controls.ListView)this.QueueListView).RightTapped += this.OnQueueRightTapped;
                }
                break;
            case 11: // MainWindow.xaml line 251
                {
                    global::Microsoft.UI.Xaml.Controls.ListView element11 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.ListView>(target);
                    ((global::Microsoft.UI.Xaml.Controls.ListView)element11).ItemClick += this.OnSongItemClick;
                    ((global::Microsoft.UI.Xaml.Controls.ListView)element11).RightTapped += this.OnSongRightTapped;
                }
                break;
            case 17: // MainWindow.xaml line 261
                {
                    global::Microsoft.UI.Xaml.Controls.MenuFlyoutItem element17 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.MenuFlyoutItem>(target);
                    ((global::Microsoft.UI.Xaml.Controls.MenuFlyoutItem)element17).Click += this.OnViewSongDetails;
                }
                break;
            case 29: // MainWindow.xaml line 36
                {
                    this.VolumeSlider = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Slider>(target);
                    ((global::Microsoft.UI.Xaml.Controls.Slider)this.VolumeSlider).ValueChanged += this.OnVolumeChanged;
                }
                break;
            case 30: // MainWindow.xaml line 55
                {
                    this.VolumeNormCheckBox = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.CheckBox>(target);
                    ((global::Microsoft.UI.Xaml.Controls.CheckBox)this.VolumeNormCheckBox).Checked += this.OnVolumeNormChanged;
                    ((global::Microsoft.UI.Xaml.Controls.CheckBox)this.VolumeNormCheckBox).Unchecked += this.OnVolumeNormChanged;
                }
                break;
            case 32: // MainWindow.xaml line 65
                {
                    global::Microsoft.UI.Xaml.Controls.AppBarButton element32 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.AppBarButton>(target);
                    ((global::Microsoft.UI.Xaml.Controls.AppBarButton)element32).Click += this.OnSettingsClicked;
                }
                break;
            case 33: // MainWindow.xaml line 71
                {
                    global::Microsoft.UI.Xaml.Controls.AppBarButton element33 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.AppBarButton>(target);
                    ((global::Microsoft.UI.Xaml.Controls.AppBarButton)element33).Click += this.OnPlayClicked;
                }
                break;
            case 34: // MainWindow.xaml line 76
                {
                    global::Microsoft.UI.Xaml.Controls.AppBarButton element34 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.AppBarButton>(target);
                    ((global::Microsoft.UI.Xaml.Controls.AppBarButton)element34).Click += this.OnPauseClicked;
                }
                break;
            case 35: // MainWindow.xaml line 81
                {
                    global::Microsoft.UI.Xaml.Controls.AppBarButton element35 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.AppBarButton>(target);
                    ((global::Microsoft.UI.Xaml.Controls.AppBarButton)element35).Click += this.OnStopClicked;
                }
                break;
            case 36: // MainWindow.xaml line 86
                {
                    global::Microsoft.UI.Xaml.Controls.AppBarButton element36 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.AppBarButton>(target);
                    ((global::Microsoft.UI.Xaml.Controls.AppBarButton)element36).Click += this.OnNextClicked;
                }
                break;
            case 37: // MainWindow.xaml line 91
                {
                    global::Microsoft.UI.Xaml.Controls.AppBarButton element37 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.AppBarButton>(target);
                    ((global::Microsoft.UI.Xaml.Controls.AppBarButton)element37).Click += this.OnRepeatClicked;
                }
                break;
            case 38: // MainWindow.xaml line 96
                {
                    global::Microsoft.UI.Xaml.Controls.AppBarButton element38 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.AppBarButton>(target);
                    ((global::Microsoft.UI.Xaml.Controls.AppBarButton)element38).Click += this.OnVocalClicked;
                }
                break;
            case 39: // MainWindow.xaml line 102
                {
                    global::Microsoft.UI.Xaml.Controls.AppBarButton element39 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.AppBarButton>(target);
                    ((global::Microsoft.UI.Xaml.Controls.AppBarButton)element39).Click += this.OnFullScreenClicked;
                }
                break;
            case 40: // MainWindow.xaml line 108
                {
                    global::Microsoft.UI.Xaml.Controls.AppBarButton element40 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.AppBarButton>(target);
                    ((global::Microsoft.UI.Xaml.Controls.AppBarButton)element40).Click += this.OnMoveUpClicked;
                }
                break;
            case 41: // MainWindow.xaml line 113
                {
                    global::Microsoft.UI.Xaml.Controls.AppBarButton element41 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.AppBarButton>(target);
                    ((global::Microsoft.UI.Xaml.Controls.AppBarButton)element41).Click += this.OnMoveDownClicked;
                }
                break;
            case 42: // MainWindow.xaml line 128
                {
                    global::Microsoft.UI.Xaml.Controls.AppBarButton element42 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.AppBarButton>(target);
                    ((global::Microsoft.UI.Xaml.Controls.AppBarButton)element42).Click += this.OnMoveTopClicked;
                }
                break;
            case 43: // MainWindow.xaml line 143
                {
                    global::Microsoft.UI.Xaml.Controls.AppBarButton element43 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.AppBarButton>(target);
                    ((global::Microsoft.UI.Xaml.Controls.AppBarButton)element43).Click += this.OnMoveBottomClicked;
                }
                break;
            case 44: // MainWindow.xaml line 159
                {
                    global::Microsoft.UI.Xaml.Controls.AppBarButton element44 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.AppBarButton>(target);
                    ((global::Microsoft.UI.Xaml.Controls.AppBarButton)element44).Click += this.OnDeleteClicked;
                }
                break;
            default:
                break;
            }
            this._contentLoaded = true;
        }

        /// <summary>
        /// GetBindingConnector(int connectionId, object target)
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2408")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.UI.Xaml.Markup.IComponentConnector GetBindingConnector(int connectionId, object target)
        {
            global::Microsoft.UI.Xaml.Markup.IComponentConnector returnValue = null;
            switch(connectionId)
            {
            case 1: // MainWindow.xaml line 1
                {                    
                    global::Microsoft.UI.Xaml.Window element1 = (global::Microsoft.UI.Xaml.Window)target;
                    MainWindow_obj1_Bindings bindings = new MainWindow_obj1_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(this);
                    this.Bindings = bindings;
                    element1.Activated += bindings.Activated;
                }
                break;
            }
            return returnValue;
        }
    }
}

